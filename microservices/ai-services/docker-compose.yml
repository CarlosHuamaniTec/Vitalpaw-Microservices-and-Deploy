services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--ping=true"
      - "--log.level=DEBUG"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
    healthcheck:
          test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/ping"]
          interval: 15s
          timeout: 10s
          retries: 3
          start_period: 10s

  ollama-gpu:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    container_name: ollama-gpu
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=10m
      - NVIDIA_VISIBLE_DEVICES=all
      - LLM_MODEL=${LLM_MODEL:-phi4-mini:3.8b}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-bge-m3:567m}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
        limits:
          cpus: '4.0'
          memory: 12G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--spider", "http://localhost:11434/api/tags"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ollama-gpu.rule=Host(`ollama-gpu.local`)"
      - "traefik.http.services.ollama-gpu.loadbalancer.server.port=11434"
      - "traefik.http.routers.ollama-gpu.entrypoints=web"

  qdrant:
    build:
      context: .
      dockerfile: Dockerfile.qdrant
    container_name: qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:6333/readyz | grep -q 'all shards are ready'"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.local`)"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
      - "traefik.http.routers.qdrant.entrypoints=web"

  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.30.3
    container_name: dragonfly
    volumes:
      - dragonfly_data:/data
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 4G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dragonfly.rule=Host(`dragonfly.local`)"
      - "traefik.http.services.dragonfly.loadbalancer.server.port=6379"
      - "traefik.http.routers.dragonfly.entrypoints=web"

  auth-service:
    build: ./auth-service
    container_name: auth-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:sqlite:/app/auth.db
    volumes:
      - auth_data:/app
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`auth-service.local`) && PathPrefix(`/api`)"
      - "traefik.http.services.auth-service.loadbalancer.server.port=8080"
      - "traefik.http.routers.auth-service.entrypoints=web"
      - "traefik.http.routers.auth-admin.rule=Host(`auth-service.local`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.auth-admin.entrypoints=web"
      - "traefik.http.routers.auth-admin.middlewares=auth-admin"
      - "traefik.http.middlewares.auth-admin.basicauth.users=admin:$$2y$$05$$MNY3SLG7LbKEAKm8Io3NOOSiw9ZUdmrU9GiQIY9uLWlG1yruqdn3W"
  ai-api:
    build: ./ai_api
    container_name: ai-api
    environment:
      - OLLAMA_GPU_HOST=http://ollama-gpu:11434
      - QDRANT_HOST=http://qdrant:6333
      - REDIS_HOST=dragonfly
      - AUTH_SERVICE_URL=http://auth-service:8080/api/auth
      - LLM_MODEL=${LLM_MODEL:-phi4-mini:3.8b}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-bge-m3:567m}
      - API_PORT=8000
    depends_on:
      - ollama-gpu
      - qdrant
      - dragonfly
      - auth-service
    volumes:
      - ./docs:/app/docs:ro,z
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--output-document", "/dev/null", "http://localhost:8000/"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-api.rule=Host(`ai-api.local`)"
      - "traefik.http.services.ai-api.loadbalancer.server.port=8000"
      - "traefik.http.routers.ai-api.entrypoints=web"
    
  chatbot:
    build: ./chatbot
    container_name: chatbot
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chatbot.rule=Host(`chatbot.local`)"
      - "traefik.http.services.chatbot.loadbalancer.server.port=3000"
      - "traefik.http.routers.chatbot.entrypoints=web"
volumes:
  ollama_data:
    name: ollama_data
  qdrant_data:
    name: qdrant_data
  dragonfly_data:
    name: dragonfly_data
  auth_data:
    name: auth_data